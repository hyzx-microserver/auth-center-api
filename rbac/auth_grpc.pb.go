// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: rbac/auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_Authorize_FullMethodName = "/auth.v1.AuthService/Authorize"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, AuthService_Authorize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AuthService_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac/auth.proto",
}

const (
	AuthInternalService_SyncPermissions_FullMethodName = "/auth.v1.AuthInternalService/SyncPermissions"
)

// AuthInternalServiceClient is the client API for AuthInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthInternalServiceClient interface {
	// 手动同步权限规则
	SyncPermissions(ctx context.Context, in *SyncPermissionsRequest, opts ...grpc.CallOption) (*SyncPermissionsResponse, error)
}

type authInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthInternalServiceClient(cc grpc.ClientConnInterface) AuthInternalServiceClient {
	return &authInternalServiceClient{cc}
}

func (c *authInternalServiceClient) SyncPermissions(ctx context.Context, in *SyncPermissionsRequest, opts ...grpc.CallOption) (*SyncPermissionsResponse, error) {
	out := new(SyncPermissionsResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_SyncPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthInternalServiceServer is the server API for AuthInternalService service.
// All implementations must embed UnimplementedAuthInternalServiceServer
// for forward compatibility
type AuthInternalServiceServer interface {
	// 手动同步权限规则
	SyncPermissions(context.Context, *SyncPermissionsRequest) (*SyncPermissionsResponse, error)
	mustEmbedUnimplementedAuthInternalServiceServer()
}

// UnimplementedAuthInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthInternalServiceServer struct {
}

func (UnimplementedAuthInternalServiceServer) SyncPermissions(context.Context, *SyncPermissionsRequest) (*SyncPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPermissions not implemented")
}
func (UnimplementedAuthInternalServiceServer) mustEmbedUnimplementedAuthInternalServiceServer() {}

// UnsafeAuthInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthInternalServiceServer will
// result in compilation errors.
type UnsafeAuthInternalServiceServer interface {
	mustEmbedUnimplementedAuthInternalServiceServer()
}

func RegisterAuthInternalServiceServer(s grpc.ServiceRegistrar, srv AuthInternalServiceServer) {
	s.RegisterService(&AuthInternalService_ServiceDesc, srv)
}

func _AuthInternalService_SyncPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).SyncPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_SyncPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).SyncPermissions(ctx, req.(*SyncPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthInternalService_ServiceDesc is the grpc.ServiceDesc for AuthInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.v1.AuthInternalService",
	HandlerType: (*AuthInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncPermissions",
			Handler:    _AuthInternalService_SyncPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac/auth.proto",
}
